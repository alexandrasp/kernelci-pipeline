{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{%- extends 'base/python.jinja2' %}

{%- block python_globals %}
{{ super() }}
xfstests_bld_path = '{{ xfstests_bld_path }}'
{% endblock %}

{%- block python_imports %}
{{ super() }}
import subprocess
{%- endblock %}

{% block python_job -%}
class Job(BaseJob):
    def _kernel_config(self, kdir):
        try:
            os.chdir(kdir)
            result = subprocess.run("kvm-xfstests install-kconfig", check=True, shell=True)
            if result.returncode == 0:
                print(f"Kernel config done.")
                return 'pass'
            else:
                print((f"Missing kernel .config file."))
                return 'fail'
        except Exception as e:
            print('Kernel config error:', e)
            return 'fail'

    def _kernel_build(self, kdir):
        try:
            os.chdir(kdir)
            result = subprocess.run("make -j$(nproc)", check=True, shell=True)
            if result.returncode == 0:
                print(f"Kernel Build DONE.")
                return 'pass'
            else:
                return 'fail'
        except Exception as e:
            print('Kernel build error:', e)

    def _get_xml_from_vm(self, kdir):
        try:
            result = subprocess.run([f"debugfs -R \"dump ext4/results-4k/results.xml {kdir}/results.xml\" {xfstests_bld_path}/run-fstests/disks/vdg"], check=True, shell=True)
            if result.returncode == 0:
                print(f"XML file in the output directory.")
                return 'pass'
        except Exception as e:
            print('XML not found.', e)
            return 'fail'

    def _run_smoke_tests(self):
        try:
            result = subprocess.run(["kvm-xfstests", "smoke"], check=True)
            if result.returncode == 0:
                print(f"Test run success.")
                return 'pass'
        except Exception as e:
            print('Problem found during tests:', e)
            return 'fail'

    def _check_kvm_xfstest_env(self):
        try:
            result = subprocess.run("kvm-xfstests --help", check=True, shell=True)
            if result.returncode == 0:
                print(f"KVM-xftests found.")
                return True
            else:
                return False
        except Exception as e:
            print(f"Raised exception: {e}")
            return False

    def _run(self, src_path):
        print("Checking if KVM-xfstests is available...")
        if self._check_kvm_xfstest_env():
            if self._kernel_config(src_path) == 'pass':
                if self._kernel_build(src_path) == 'pass':
                    if self._run_smoke_tests() == 'pass':
                        return self._get_xml_from_vm(src_path)
        return 'fail'
{% endblock %}
