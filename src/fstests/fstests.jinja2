{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{%- extends 'base/python.jinja2' %}

{%- block python_globals %}
{{ super() }}
xfstests_bld_path = '{{ xfstests_bld_path }}'
{% endblock %}

{%- block python_imports %}
{{ super() }}
import json
import subprocess
import xml.etree.ElementTree as ET
{%- endblock %}

{% block python_job -%}
class Job(BaseJob):
    def _kernel_config(self, kdir):
        try:
            os.chdir(kdir)
            result = subprocess.run("kvm-xfstests install-kconfig", check=True, shell=True)
            if result.returncode == 0:
                print(f"Kernel config done.")
                return True
            else:
                print((f"Missing kernel .config file."))
                return False
        except Exception as e:
            print('Kernel config error:', e)
            return False

    def _kernel_build(self, kdir):
        try:
            os.chdir(kdir)
            result = subprocess.run("make -j$(nproc)", check=True, shell=True)
            if result.returncode == 0:
                print(f"Kernel Build DONE.")
                return True
            else:
                return False
        except Exception as e:
            print('Kernel build error:', e)

    def _get_xml_from_vm(self, kdir):
        try:
            result = subprocess.run([f"debugfs -R \"dump ext4/results-4k/results.xml {kdir}/results.xml\" {xfstests_bld_path}/run-fstests/disks/vdg"], check=True, shell=True)
            if result.returncode == 0:
                print(f"XML file in the output directory.")
                return True
        except Exception as e:
            print('XML not found.', e)
            return False

    def _parse_xml_results(self, kdir):
        xml_file = ET.parse(kdir)
        root = xml_file.getroot()
        tree = {}
        for test_case in root.iter('testcase'):
            if test_case.find('skipped') is not None:
                result = None
            elif test_case.find('failure') is not None:
                result = 'fail'
            else:
                result = 'pass'
            name = test_case.attrib['name'].split('/')
            if not name[0] == 'ext4':
                name.insert(0, 'ext4')
            current = tree
            for item in name:
                if not item in current:
                    current[item] = {}
                current = current[item]
            current['result'] = result
        return tree

    def _run_smoke_tests(self):
        try:
            result = subprocess.run(["kvm-xfstests", "smoke"], check=True)
            if result.returncode == 0:
                print(f"Test run success.")
                return True
        except Exception as e:
            print('Problem found during tests:', e)
            return False

    def _convert_results_for_api(self, tree, name):
        if 'result' in tree:
            return {
                'name': name,
                'result': tree['result'],
            }
        else:
            child_nodes = []
            for child_name in tree:
                child_nodes.append(self._convert_results_for_api(tree[child_name], child_name))
            return {
                'name': name,
                'child_nodes': child_nodes,
            }

    def _parse_results(self, kdir):
        tree_data = self._parse_xml_results(os.path.join(kdir, 'results.xml'))
        api_data = self._convert_results_for_api(tree_data, 'fstests')
        return api_data

    def _check_kvm_xfstest_env(self):
        try:
            result = subprocess.run("kvm-xfstests --help", check=True, shell=True)
            if result.returncode == 0:
                print(f"KVM-xftests found.")
                return True
            else:
                return False
        except Exception as e:
            print(f"Raised exception: {e}")
            return False

    def _run(self, src_path):
        if not self._kernel_config(src_path):
            return 'fail'
        if not self._kernel_build(src_path):
            return 'fail'
        if not self._run_smoke_tests():
            return 'fail'
        if not self._get_xml_from_vm(src_path):
            return 'fail'
        with open(os.path.join(src_path, 'results.json'), 'w') as result_file:
            result_file.write(json.dumps(self._parse_results(src_path)))
        return 'pass'
{% endblock %}
